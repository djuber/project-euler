;; Problem 2
;; 19 October 2001

;; Each new term in the Fibonacci sequence is generated by adding the
;; previous two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do
;; not exceed four million, find the sum of the even-valued terms.

;; Answer:
;; 	4613732

;; remove-if-not is the word I was looking for.
(defun p2 (&optional (n 1000000))
  (apply '+ (filter (lambda (x) (if (evenp x) x)) (fibs-until n))))

(defun filter (fn lst)
  (let ((acc nil))
    (dolist (x lst)
      (let ((val (funcall fn x)))
	(if val (push val acc))))
    (nreverse acc)))

(defun fibs-until (n)
  "make a list of fibonacci numbers"
  (labels
      ((rec (l n)
	 (let ((r (+ (first l) (second l))))
	   (if (<  r n)
	       (rec (cons r l) n)
	       l))))
    (rec '(2 1) n)))


;; simpler version : time is much less variable than above
(defun p2a (&optional (n 1000000))
  (let ((s 0))
  (do ((a 1 b)
       (b 1 (+ a b)))
      ((> b n) s)
    (if (evenp b)
        (incf s b)))))