(defun perm-gen (elements)
  (labels
      ((finish (&optional last) (values last #'finish))
       (pg (heads elements)
	 (cond
	   ((endp heads) (finish))
	   ((endp (cdr elements)) (finish elements))
	   (t (let ((other-elements (remove (car heads) elements)))
		(gwh (car heads)
		     #'(lambda () (pg other-elements other-elements))
		     #'(lambda () (pg (cdr heads) elements)))))))
       (gwh (head tailgen K)
	 (multiple-value-bind (tail tailgen) (funcall tailgen)
	   (if (null tail)
	       (funcall K)
	       (values (cons head tail)
		       #'(lambda () (gwh head tailgen K)))))))
    (pg elements elements)))
 
(defun problem41 ()
  (let ((elements (list 7 6 5 4 3 2 1)))
    (multiple-value-bind (p next) (perm-gen elements)
      (loop (when (primep (digits->number p)) (return p))
	 (setf (values p next) (funcall next))))))